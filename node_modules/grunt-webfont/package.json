{
  "name": "grunt-webfont",
  "description": "Ultimate SVG to webfont converter for Grunt.",
  "version": "0.4.8",
  "homepage": "https://github.com/sapegin/grunt-webfont",
  "author": {
    "name": "Artem Sapegin",
    "url": "http://sapegin.me/"
  },
  "contributors": [
    {
      "name": "Maxime Thirouin",
      "url": "http://moox.io/"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/sapegin/grunt-webfont.git"
  },
  "bugs": {
    "url": "https://github.com/sapegin/grunt-webfont/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/sapegin/grunt-webfont/blob/master/License.md"
    }
  ],
  "main": "tasks/webfont.js",
  "scripts": {
    "test": "grunt --stack"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "dependencies": {
    "async": "~0.9.0",
    "chalk": "~0.5.1",
    "exec": "~0.1.1",
    "glob": "~4.0.5",
    "lodash": "~2.4.1",
    "mkdirp": "~0.5.0",
    "svg2ttf": "git://github.com/mstorus/svg2ttf#o2",
    "svgicons2svgfont": "git://github.com/mstorus/svgicons2svgfont#o2",
    "temp": "~0.8.0",
    "ttf2eot": "~1.3.0",
    "ttf2woff": "~1.3.0",
    "underscore.string": "~2.3.3",
    "winston": "~0.7.3"
  },
  "devDependencies": {
    "grunt": "~0.4.5",
    "grunt-contrib-clean": "~0.6.0",
    "grunt-contrib-jshint": "~0.10.0",
    "grunt-contrib-nodeunit": "~0.4.1",
    "grunt-contrib-watch": "~0.6.1",
    "grunt-jscs": "~0.6.1",
    "load-grunt-tasks": "~0.6.0",
    "stylus": "~0.47.3",
    "xml2js": "~0.4.4"
  },
  "peerDependencies": {
    "grunt": "~0.4.0"
  },
  "keywords": [
    "gruntplugin",
    "font",
    "fontforge",
    "font-face",
    "woff",
    "ttf",
    "svg",
    "eot",
    "truetype",
    "css",
    "icon"
  ],
  "readme": "# SVG to webfont converter for Grunt\n\n[![Build Status](https://travis-ci.org/sapegin/grunt-webfont.png)](https://travis-ci.org/sapegin/grunt-webfont)\n[![Built with Grunt](https://cdn.gruntjs.com/builtwith.png)](http://gruntjs.com/)\n\nGenerate custom icon webfonts from SVG files via Grunt. Based on [Font Custom](http://endtwist.github.com/fontcustom/).\n\nThis task will make all you need to use font-face icon on your website: font in all needed formats, CSS/Sass/LESS/Stylus and HTML demo page.\n\n## Features\n\n* Works on Mac, Windows and Linux.\n* Very flexible.\n* Semantic: uses [Unicode private use area](http://bit.ly/ZnkwaT).\n* [Cross-browser](http://www.fontspring.com/blog/further-hardening-of-the-bulletproof-syntax/): IE8+.\n* BEM or Bootstrap output CSS style.\n* CSS preprocessors support.\n* Data:uri embedding.\n* Ligatures.\n* HTML preview.\n* Custom templates.\n\n\n## Installation\n\nThis plugin requires Grunt 0.4. Note that `ttfautohint` is optional, but your generated font will not be properly hinted if it’s not installed.\n\n### OS X\n\n```\nbrew install ttfautohint fontforge --with-python\nnpm install grunt-webfont --save-dev\n```\n\n*You may need to use `sudo` for `brew`, depending on your setup.*\n\n*`fontforge` isn’t required for `node` engine (see below).*\n\n### Linux\n\n```\nsudo apt-get install fontforge ttfautohint\nnpm install grunt-webfont --save-dev\n```\n\n*`fontforge` isn’t required for `node` engine (see below).*\n\n### Windows\n\n```\nnpm install grunt-webfont --save-dev\n```\n\nThen [install `ttfautohint`](http://www.freetype.org/ttfautohint/#download) (optional).\n\n*Only `node` engine available (see below).*\n\n\n## Available Engines\n\nThere are two font rendering engines available. See also `engine` option below.\n\n### fontforge\n\n#### Pros\n\n* All features supported.\n* The best results.\n\n#### Cons\n\n* Doesn’t work on Windows.\n* You have to install `fontforge`.\n* Really weird bugs sometimes.\n\n### node :skull: experimental :skull:\n\n#### Pros\n\n* No external dependencies (except optional `ttfautohint`).\n* Works on all platforms.\n\n#### Cons\n\n* Doesn’t work with some SVG files.\n* Ligatures don’t supported.\n\n\n## Configuration\n\nAdd somewhere in your `Gruntfile.js`:\n\n```javascript\ngrunt.loadNpmTasks('grunt-webfont');\n```\n\nInside your `Gruntfile.js` file add a section named `webfont`. See Parameters section below for details.\n\n\n### Parameters\n\n#### src\n\nType: `string|array`\n\nGlyphs list: SVG. String or array. Wildcards are supported.\n\n#### dest\n\nType: `string`\n\nDirectory for resulting files.\n\n#### destCss\n\nType: `string` Default: _`dest` value_\n\nDirectory for resulting CSS files (if different than font directory).\n\n#### Options\n\nAll options should be inside `options` object:\n\n``` javascript\nwebfont: {\n  icons: {\n    src: 'icons/*.svg',\n    dest: 'build/fonts',\n    options: {\n      ...\n    }\n  }\n}\n```\n\n#### font\n\nType: `string` Default: `icons`\n\nName of font and base name of font files.\n\n#### hashes\n\nType: `boolean` Default: `true`\n\nAppend font file names with unique string to flush browser cache when you update your icons.\n\n#### styles\n\nType: `string|array` Default: `'font,icon'`\n\nList of styles to be added to CSS files: `font` (`font-face` declaration), `icon` (base `.icon` class), `extra` (extra stuff for Bootstrap (only for `syntax` = `'bootstrap'`).\n\n#### types\n\nType: `string|array` Default: `'eot,woff,ttf'`\n\nFont files types to generate.\n\n#### order\n\nType: `string|array` Default: `'eot,woff,ttf,svg'`\n\nOrder of `@font-face`’s `src` values in CSS file. (Only file types defined in `types` option will be generated.)\n\n#### syntax\n\nType: `string` Default: `bem`\n\nIcon classes syntax. `bem` for double class names: `icon icon_awesome` or `bootstrap` for single class names: `icon-awesome`.\n\n#### template\n\nType: `string` Default: `null`\n\nCustom CSS template path (see `tasks/templates` for some examples). Should be used instead of `syntax`. (You probably need to define `htmlDemoTemplate` option too.)\n\nTemplate is a pair of CSS and JSON (optional) files with the same name.\n\nFor example, your Gruntfile:\n\n```js\noptions: {\n  template: 'my_templates/tmpl.css'\n}\n```\n\n`my_templates/tmpl.css`:\n\n```css\n@font-face {\n  font-family:\"<%= fontBaseName %>\";\n  ...\n}\n...\n```\n\n`my_templates/tmpl.json`:\n\n```json\n{\n  \"baseClass\": \"icon\",\n  \"classPrefix\": \"icon_\"\n}\n```\n\n#### templateOptions\n\nType: `object` Default: `{}`\n\nExtends/overrides CSS template or syntax’s JSON file. Allows custom class names in default css templates.\n\n``` javascript\noptions: {\n\ttemplateOptions: {\n\t\tbaseClass: 'glyph-icon',\n\t\tclassPrefix: 'glyph_',\n\t\tmixinPrefix: 'glyph-'\n\t}\n}\n```\n\n#### stylesheet\n\nType: `string` Default: `'css'`\n\nStylesheet type. Can be css, sass, scss, less... If `sass` or `scss` is used, `_` will prefix the file (so it can be a used as a partial).\n\n#### relativeFontPath\n\nType: `string` Default: `null`\n\nCustom font path. Will be used instead of `destCss` *in* CSS file. Useful with CSS preprocessors.\n\n#### htmlDemo\n\nType: `boolean` Default: `true`\n\nIf `true`, an HTML file will be available (by default, in `destCSS` folder) to test the render.\n\n#### htmlDemoTemplate\n\nType: `string` Default: `null`\n\nCustom demo HTML template path (see `tasks/templates/demo.html` for an example) (requires `htmlDemo` option to be true).\n\n#### destHtml\n\nType: `string` Default: _`destCss` value_\n\nCustom demo HTML demo path (requires `htmlDemo` option to be true).\n\n#### embed\n\nType: `string|array` Default: `false`\n\nIf `true` embeds WOFF (*only WOFF*) file as data:uri.\n\nIF `ttf` or `woff` or `ttf,woff` embeds TTF or/and WOFF file.\n\nIf there are more file types in `types` option they will be included as usual `url(font.type)` CSS links.\n\n#### ligatures\n\nType: `boolean` Default: `false`\n\nIf `true` the generated font files and stylesheets will be generated with opentype ligature features. The character sequences to be replaced by the ligatures are determined by the file name (without extension) of the original SVG.\n\nFor example, you have a heart icon in `love.svg` file. The HTML `<h1>I <span class=\"ligature-icons\">love</span> you!</h1>` will be rendered as `I ♥ you!`.\n\n#### rename\n\nType: `function` Default: `path.basename`\n\nYou can use this function to change how file names translates to class names (the part after `icon_` or `icon-`). By default it’s a name of a file.\n\nFor example you can group your icons into several folders and add folder name to class name:\n\n```js\noptions: {\n  rename: function(name) {\n    // .icon_entypo-add, .icon_fontawesome-add, etc.\n    return [path.basename(path.dirname(name)), path.basename(name)].join('-');\n  }\n}\n```\n\n#### skip\n\nType: `boolean` Default: `false`\n\nIf `true` task will not be ran. In example, you can skip task on Windows (becase of difficult installation):\n\n```javascript\noptions: {\n\tskip: require('os').platform() === 'win32'\n}\n```\n\n#### engine :skull: experimental :skull:\n\nType: `string` Default: `fontforge`\n\nFont rendering engine: `fontforge` or `node`. See comparison in [Available Engines](#available-engines) section above.\n\n#### ie7\n\nType: `boolean` Default: `false`\n\nAdds IE7 support using a `*zoom: expression()` hack.\n\n#### startCodepoint\n\nType: `integer` Default: `0xF101`\n\nStarting codepoint used for the generated glyphs. Defaults to the start of the Unicode private use area.\n\n#### codepoints\n\nType: `object` Default: `null`\n\nSpecific codepoints to use for certain glyphs. Any glyphs not specified in the codepoints block will be given incremented as usual from the `startCodepoint`, skipping duplicates.\n\n```javascript\noptions: {\n\tcodepoints: {\n\t  single: 0xE001\n\t}\n}\n```\n\n#### autoHint\n\nType: `boolean` Default: `true`\n\nEnables font auto hinting using `ttfautohint`.\n\n#### fontHeight\n\nType: `number` Default: `512`\n\n#### descent\n\nType: `number` Default: `64`\n\n#### ascent\n\nType: `number` Default: `448`\n\n### Config Examples\n\n#### Simple font generation\n\n```javascript\nwebfont: {\n  icons: {\n    src: 'icons/*.svg',\n    dest: 'build/fonts'\n  }\n}\n```\n\n#### Custom font name, fonts and CSS in different folders\n\n```javascript\nwebfont: {\n  icons: {\n    src: 'icons/*.svg',\n    dest: 'build/fonts',\n    destCss: 'build/fonts/css',\n    options: {\n      font: 'ponies'\n    }\n  }\n}\n```\n\n#### Custom CSS classes\n\n```js\nwebfont: {\n  icons: {\n    src: 'icons/*.svg',\n    dest: 'build/fonts',\n    options: {\n      syntax: 'bem',\n      templateOptions: {\n        baseClass: 'glyph-icon',\n        classPrefix: 'glyph_',\n        mixinPrefix: 'glyph-'\n      }\n    }\n  }\n}\n```\n\n#### To use with CSS preprocessor\n\n```javascript\nwebfont: {\n  icons: {\n    src: 'icons/*.svg',\n    dest: 'build/fonts',\n    destCss: 'build/styles',\n    options: {\n      stylesheet: 'styl',\n      relativeFontPath: '/build/fonts'\n    }\n  }\n}\n```\n\n#### Embedded font file\n\n```javascript\nwebfont: {\n  icons: {\n    src: 'icons/*.svg',\n    dest: 'build/fonts',\n    options: {\n      types: 'woff',\n      embed: true\n    }\n  }\n}\n```\n\n## CSS Preprocessors Caveats\n\nYou can change CSS file syntax using `stylesheet` option (see above). It change file extension (so you can specify any) with some tweaks. Replace all comments with single line comments (which will be removed after compilation).\n\n### SASS\n\nIf `stylesheet` option is `sass` or `scss`, `_` will prefix the file (so it can be a used as a partial).\n\n### LESS\n\nIf `stylesheet` option is `less`, regular CSS icon classes will be expanded with corresponding LESS mixins.\n\nThe LESS mixins then may be used like so:\n\n```css\n.profile-button {\n  .icon-profile;\n}\n```\n\n## Changelog\n\nThe changelog can be found in the `Changelog.md` file.\n\n## Troubleshooting\n\n##### I have problems displaying the font in Firefox\n\nFirefox doesn’t allow cross-domain fonts: [Specifications](http://www.w3.org/TR/css3-fonts/#font-fetching-requirements), [Bugzilla Ticket](https://bugzilla.mozilla.org/show_bug.cgi?id=604421), [How to fix it](https://coderwall.com/p/v4uwyq).\n\n## License\n\nThe MIT License, see the included `License.md` file.\n",
  "readmeFilename": "Readme.md",
  "_id": "grunt-webfont@0.4.8",
  "_shasum": "b9f4443e7a4360ce543c2b81cb230b51958e31f2",
  "_resolved": "git://github.com/mstorus/grunt-webfont#41e602b34f7ede634d4f26ccd43eeac24dc51840",
  "_from": "grunt-webfont@>=0.4.8-0 <0.5.0-0"
}
